import{_ as a,c as s,o as i,a4 as t}from"./chunks/framework.sQ8wSw9M.js";const m=JSON.parse('{"title":"3. JDBC","description":"","frontmatter":{},"headers":[],"relativePath":"3-jdbc.md","filePath":"3-jdbc.md"}'),n={name:"3-jdbc.md"};function r(d,e,l,o,c,p){return i(),s("div",null,e[0]||(e[0]=[t('<h1 id="_3-jdbc" tabindex="-1">3. JDBC <a class="header-anchor" href="#_3-jdbc" aria-label="Permalink to &quot;3. JDBC&quot;">​</a></h1><p>Java pot connectar-se amb diferents SGBD i en diferents sistemes operatius. Independentment del mètode en què s&#39;emmagatzemen les dades ha d&#39;existir sempre un <strong>mediador</strong> entre l&#39;aplicació i el sistema de base de dades i en Java aqueixa funció la realitza <strong>JDBC</strong>.</p><div class="warning custom-block"><p class="custom-block-title"><strong>ATENCIÓ</strong></p><p>Per a la connexió a les bases de dades utilitzarem la API estàndard de JAVA denominada JDBC (Java Data Base Connection)</p></div><p>JDBC és un API (Application Programming Interface) inclòs dins del llenguatge Java per a l&#39;accés a bases de dades. Consisteix en un conjunt de classes i interfícies escrites en Java que ofereixen un complet API per a la programació amb bases de dades, per tant és l&#39;única solució 100% Java que permet l&#39;accés a bases de dades.</p><p>JDBC és una especificació formada per una col·lecció d&#39;interfícies i classes abstractes, que tots els fabricants de drivers han d&#39;implementar si volen realitzar una implementació del seua driver 100% Java i compatible amb JDBC (JDBC-compliant driver). Pel fet que JDBC està escrit completament a Java també posseeix l&#39;avantatge de ser independent de la plataforma.</p><div class="warning custom-block"><p class="custom-block-title"><strong>ATENCIÓ</strong></p><p>No serà necessari escriure un programa per a cada tipus de base de dades, una mateixa aplicació escrita utilitzant JDBC podrà manejar bases de dades Oracle, Sybase, SQL Server, etc.</p></div><p>A més podrà executar-se en qualsevol sistema operatiu que posseïsca una Màquina Virtual de Java, és a dir, seran aplicacions completament independents de la plataforma. Unes altres APIS que se solen utilitzar bastant per a l&#39;accés a bases de dades són DAO (Data Access Objects) i RDO (Remote Data Objects), i ADO (ActiveX Data Objects), però el problema que ofereixen aquestes solucions és que només són per a plataformes Windows.</p><p>JDBC té les seues classes en el paquet java.sql i altres extensions en el paquet javax.sql.</p><h2 id="_3-1-funcions-del-jdbc" tabindex="-1">3.1 Funcions del JDBC <a class="header-anchor" href="#_3-1-funcions-del-jdbc" aria-label="Permalink to &quot;3.1 Funcions del JDBC&quot;">​</a></h2><p>Bàsicament el API JDBC fa possible la realització de les següents tasques:</p><ul><li>Establir una connexió amb una base de dades.</li><li>Enviar sentències SQL.</li><li>Manipular dades.</li><li>Processar els resultats de l&#39;execució de les sentències.</li></ul><h2 id="_3-2-drivers-jdbc" tabindex="-1">3.2 Drivers JDBC <a class="header-anchor" href="#_3-2-drivers-jdbc" aria-label="Permalink to &quot;3.2 Drivers JDBC&quot;">​</a></h2><p>Els drivers ens permeten connectar-nos amb una base de dades determinada. Existeixen <strong>quatre tipus de drivers JDBC</strong>, cada tipus presenta una filosofia de treball diferent. A continuació es passa a comentar cadascun dels drivers:</p><ul><li><p><strong>JDBC-ODBC bridge plus ODBC driver (tipus 1)</strong>: permet al programador/a accedir a fonts de dades ODBC existents mitjançant JDBC. El JDBC-ODBC Bridge (pont JDBC-ODBC) implementa operacions JDBC traduint-les a operacions ODBC, es troba dins del paquet sun.jdbc.odbc i conté llibreries natives per a accedir a ODBC. Al ser usuari de ODBC, depenem de les dll de ODBC i això limita la quantitat de plataformes on es pot executar l&#39;aplicació.</p></li><li><p><strong>Native-API partly-Java driver (tipus 2)</strong>: són similars als drivers de tipus 1, encara que també necessiten una configuració en la màquina client. Aquest tipus de driver converteix anomenades JDBC a anomenades de Oracle, Sybase, Informix, DB2 o altres SGBD. Tampoc es poden utilitzar dins de miniaplicacions al posseir codi natiu.</p></li><li><p><strong>JDBC-Net pure Java driver (tipus 3)</strong>: Aquests controladors estan escrits en Java i s&#39;encarreguen de convertir les anomenades JDBC a un protocol independent de la base de dades i a més en l&#39;aplicació servidora utilitzen les funcions natives del sistema de gestió de base de dades mitjançant l&#39;ús d&#39;una biblioteca JDBC en el servidor. L&#39;avantatge d&#39;aquesta opció és la portabilitat.</p></li><li><p><strong>JDBC de Java client (tipus 4)</strong>: Aquests controladors estan escrits en Java i s&#39;encarreguen de convertir les anomenades JDBC a un protocol independent de la base de dades i en l&#39;aplicació servidora utilitzen les funcions natives del sistema de gestió de base de dades sense necessitat de biblioteques. L&#39;avantatge d&#39;aquesta opció és la portabilitat. Són com els drivers de tipus 3 però sense la figura de l&#39;intermediari i tampoc requereixen cap configuració en la màquina client. Els drivers de tipus 4 es poden utilitzar per a servidors Web de grandària petita i mitjana, així com per a intranets.</p></li></ul>',14)]))}const b=a(n,[["render",r]]);export{m as __pageData,b as default};
